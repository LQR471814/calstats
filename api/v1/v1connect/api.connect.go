// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/api.proto

package v1connect

import (
	v1 "calstats/api/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CalendarServiceName is the fully-qualified name of the CalendarService service.
	CalendarServiceName = "CalendarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalendarServiceCalendarProcedure is the fully-qualified name of the CalendarService's Calendar
	// RPC.
	CalendarServiceCalendarProcedure = "/CalendarService/Calendar"
	// CalendarServiceEventsProcedure is the fully-qualified name of the CalendarService's Events RPC.
	CalendarServiceEventsProcedure = "/CalendarService/Events"
)

// CalendarServiceClient is a client for the CalendarService service.
type CalendarServiceClient interface {
	Calendar(context.Context, *connect.Request[v1.CalendarRequest]) (*connect.Response[v1.CalendarResponse], error)
	Events(context.Context, *connect.Request[v1.EventsRequest]) (*connect.Response[v1.EventsResponse], error)
}

// NewCalendarServiceClient constructs a client for the CalendarService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalendarServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CalendarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	calendarServiceMethods := v1.File_v1_api_proto.Services().ByName("CalendarService").Methods()
	return &calendarServiceClient{
		calendar: connect.NewClient[v1.CalendarRequest, v1.CalendarResponse](
			httpClient,
			baseURL+CalendarServiceCalendarProcedure,
			connect.WithSchema(calendarServiceMethods.ByName("Calendar")),
			connect.WithClientOptions(opts...),
		),
		events: connect.NewClient[v1.EventsRequest, v1.EventsResponse](
			httpClient,
			baseURL+CalendarServiceEventsProcedure,
			connect.WithSchema(calendarServiceMethods.ByName("Events")),
			connect.WithClientOptions(opts...),
		),
	}
}

// calendarServiceClient implements CalendarServiceClient.
type calendarServiceClient struct {
	calendar *connect.Client[v1.CalendarRequest, v1.CalendarResponse]
	events   *connect.Client[v1.EventsRequest, v1.EventsResponse]
}

// Calendar calls CalendarService.Calendar.
func (c *calendarServiceClient) Calendar(ctx context.Context, req *connect.Request[v1.CalendarRequest]) (*connect.Response[v1.CalendarResponse], error) {
	return c.calendar.CallUnary(ctx, req)
}

// Events calls CalendarService.Events.
func (c *calendarServiceClient) Events(ctx context.Context, req *connect.Request[v1.EventsRequest]) (*connect.Response[v1.EventsResponse], error) {
	return c.events.CallUnary(ctx, req)
}

// CalendarServiceHandler is an implementation of the CalendarService service.
type CalendarServiceHandler interface {
	Calendar(context.Context, *connect.Request[v1.CalendarRequest]) (*connect.Response[v1.CalendarResponse], error)
	Events(context.Context, *connect.Request[v1.EventsRequest]) (*connect.Response[v1.EventsResponse], error)
}

// NewCalendarServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalendarServiceHandler(svc CalendarServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	calendarServiceMethods := v1.File_v1_api_proto.Services().ByName("CalendarService").Methods()
	calendarServiceCalendarHandler := connect.NewUnaryHandler(
		CalendarServiceCalendarProcedure,
		svc.Calendar,
		connect.WithSchema(calendarServiceMethods.ByName("Calendar")),
		connect.WithHandlerOptions(opts...),
	)
	calendarServiceEventsHandler := connect.NewUnaryHandler(
		CalendarServiceEventsProcedure,
		svc.Events,
		connect.WithSchema(calendarServiceMethods.ByName("Events")),
		connect.WithHandlerOptions(opts...),
	)
	return "/CalendarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalendarServiceCalendarProcedure:
			calendarServiceCalendarHandler.ServeHTTP(w, r)
		case CalendarServiceEventsProcedure:
			calendarServiceEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalendarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalendarServiceHandler struct{}

func (UnimplementedCalendarServiceHandler) Calendar(context.Context, *connect.Request[v1.CalendarRequest]) (*connect.Response[v1.CalendarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("CalendarService.Calendar is not implemented"))
}

func (UnimplementedCalendarServiceHandler) Events(context.Context, *connect.Request[v1.EventsRequest]) (*connect.Response[v1.EventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("CalendarService.Events is not implemented"))
}